<!---Inspired by Rasmus Lystrøm https://github.com/ondfisk/BDSA2021 -->
@page "/createidea"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using YoghurtBank.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavMan

<PageTitle>Create Idea</PageTitle>
<h1>Register your idea for a project!</h1>
<p>You register a new idea by filling out the input form below</p>


<EditForm Model="@idea" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="idea.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Subject">Subject</label>
        <InputText id="Subject" @bind-Value="idea.Subject" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="idea.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label for="AmountOfCollaborators">Amount of collaborators</label>
        <InputNumber id="Description" @bind-Value="idea.AmountOfCollaborators" class="form-control" />
    </div>
    @if(DateError)
    {
        <div class="form-group">
        <p style="color: red;">@DateErrorMessage</p>
        </div>
    }
    <div class="form-group">
        <label for="StartDate">Start date</label>
        <InputDate id="StartDate" @bind-Value="idea.StartDate" class="form-control" />
    </div>
    <div class="form-group">
        <label for="EndDate">End date</label>
        <InputDate id="EndDate" @bind-Value="end" class="form-control" />
    </div>
    <div class="form-group">
        <div>Type</div>
        <InputRadioGroup @bind-Value="idea.Type">
            <InputRadio id="Project" Value="@IdeaType.Project" class="form-check-input" /><label class="form-check-label" for="Project">@IdeaType.Project</label>
            <InputRadio id="Bachelor" Value="@IdeaType.Bachelor" class="form-check-input" /><label class="form-check-label" for="Bachelor">@IdeaType.Bachelor</label>
            <InputRadio id="Masters" Value="@IdeaType.Masters" class="form-check-input" /><label class="form-check-label" for="Masters">@IdeaType.Masters</label>
            <InputRadio id="PhD" Value="@IdeaType.PhD" class="form-check-input" /><label class="form-check-label" for="PhD">@IdeaType.PhD</label>
        </InputRadioGroup>
    </div>
    <div class="form-group">
        <br />
        <button type="submit" class="btn btn-success" >Create</button>
        <button type="reset" class="btn btn-secondary">Reset</button>
        <button type="button" class="btn btn-primary" @onclick="Back">Back</button>
    </div>
    
    

</EditForm>





@code {
    private bool DateError = false;
    private IdeaCreateDTO idea = new IdeaCreateDTO{CreatorId = 4}; //creatorid hardcoded while we figure out how to differentiate users
    private DateTime end  {get; set;} = DateTime.UtcNow;
    public DateTime DefaultValue {get; set;} = DateTime.UtcNow;
    public string DateErrorMessage {get; set;}

    protected override async Task OnInitializedAsync()
    {
        idea.StartDate = DefaultValue; 
    }

    private async Task HandleValidSubmit()
    {
        //This is maybe a bit flawed? -> worked fine before adding the == part, look into it
        if(end < DateTime.UtcNow.Date || idea.StartDate < DateTime.UtcNow.Date)
        { 
            DateError = true;
            DateErrorMessage = "Please make sure that all dates are in the future";
        }
        if(end.Date == idea.StartDate.Date)
        {
            DateError = true;
            DateErrorMessage = "Please make sure that start and end date aren't the same";
        }
        else 
        {
            DateError = false;
            //bad cast        
            TimeSpan time = end-idea.StartDate;
            idea.TimeToComplete = (TimeSpan) (end-idea.StartDate); 
            idea.Open = true; //bare sæt den som åben pr. default, eller? 
            var result = await Http.PostAsJsonAsync("https://localhost:7095/api/idea", idea);
            Console.WriteLine($"Created {result}"); 
        }
        Console.WriteLine("Success");

           
    }

    private void Back()
    {
        //find a way to go back :) or delete the button all together
    }
}