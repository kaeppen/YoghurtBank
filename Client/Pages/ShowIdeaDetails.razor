@page "/ideadetails/{ideaId:int}" 

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using YoghurtBank.Shared

@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider auth
@inject NavigationManager NavMan

<!-- Layout inspired by Rasmus LystrÃ¸m https://github.com/ondfisk/BDSA2021 -->

@if (user == null)
{
    <p><em>You have to be registrated to get access to this site</em></p>
        <div class="card-body">
            <button type="button" class="btn btn-primary" onclick= "location.href ='https://localhost:7095/registerUser'">Go to registration</button> 
        </div>

}
else
{

@if(idea != null)
{
    <div>
        <div class="card" style="width: 18rem;">
        <div class="card-header">
            @idea.Title
        </div>
        <div class="card-body">
            <h5 class="card-title">Subject: <br> @idea.Subject</h5>
            <p class="card-text">Description: <br> @idea.Description</p>
            <p class="card-text">Type of idea: <br> @idea.Type</p>
            <p class="card-text">Creator (skal nok laves om, et id kan ikke bruges til meget): <br> @idea.CreatorId</p>
            <p class="card-text">Amount of participants: <br> @idea.AmountOfCollaborators</p>
            <p class="card-text">State: <br> @idea.Open</p>
            <p class="card-text">Date of creation: <br> @idea.Posted.ToShortDateString()</p>
        </div>
        <div>
            <div class="card-body">
            <button type="button" class="btn btn-primary" style="background-color: green" @onclick="@(() => RequestCollab(idea.Id))">Request collaboration</button>
            </div>
        </div>
    </div>
    </div>

}

}
@code {
    [Parameter]
    public int? ideaId { get; set; }
    private IdeaDetailsDTO? idea;

    private UserDetailsDTO? user;
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {

        authState = await auth.GetAuthenticationStateAsync();

        var mail = authState.User.Claims.Where(c => c.Type.Equals("preferred_username")).Select(c => c.Value).FirstOrDefault();
        user = await Http.GetFromJsonAsync<UserDetailsDTO>($"https://localhost:7095/api/users/mail/{mail}");
    }

    protected override async Task OnParametersSetAsync()
    {
        idea = await Http.GetFromJsonAsync<IdeaDetailsDTO>($"https://localhost:7095/api/idea/{ideaId}");
        await base.OnParametersSetAsync(); 
    }
    private void RequestCollab(int id)
    {
        NavMan.NavigateTo($"https://localhost:7095/createrequest/{id}");
    }

}