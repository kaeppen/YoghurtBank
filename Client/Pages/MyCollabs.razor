@page "/myCollabs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using YoghurtBank.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavMan
@inject AuthenticationStateProvider auth


<PageTitle>View My CollaborationRequest</PageTitle>
<h1>Your collaboration request</h1>

<div style="display: flex">
@if(requests == null || requests.Length == 0)
{
    <h2>No requests!</h2>
}
else 
{
    foreach(var request in requests)
    {
    
    SetBackgroundColor(request);

     <div class="card" style="width: 18rem;">
                <div class="card-header">
                    <h3>Request</h3>
                </div>


                <div class="card-body" style="background-color: @Background;">
                    <h5 class="card-title">Requester: <br> @request.StudentId</h5>
                    <p class="card-text">Requested: <br> @request.SupervisorId</p>
                    <p class="card-text">Application: <br> @request.Application</p>
                    <p class="card-text">Status: <br> @request.Status</p>

                </div>

@if(Student) {
                <div class="card-body" id = "btn-panelStud">
                </div>
} else if(Student && request.Status == CollaborationRequestStatus.ApprovedBySupervisor) {
                <div class="card-body" id = "btn-panelStud">
                    <button type="button" id="Approvebtn" class="btn btn-primary" style="background-color: green" @onclick="@(() => ApproveReqSTUD(request))">Approve</button> 
                    <button type="button" class="btn btn-secondary" style="background-color: red" @onclick="@(() => DeclineReq(request))">Decline</button>  
                </div>              
} else {

                <div class="card-body" id = "btn-panelSup">
                    <button type="button" id="Approvebtn" class="btn btn-primary" style="background-color: green" @onclick="@(() => ApproveReqSUP(request))">Approve</button> 
                    <button type="button" class="btn btn-secondary" style="background-color: red" @onclick="@(() => DeclineReq(request))">Decline</button>  
                </div>
}

     </div>
    }
}

</div>

<style>
    #Approvebtn:focus {
        background-color: #3a0647;
    }
</style>

@code {

    private AuthenticationState authState;

    private CollaborationRequestDetailsDTO[]? requests;



    private string Background {get; set;} = "yellow";

    private bool Student {get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        authState = await auth.GetAuthenticationStateAsync();

        var name = "";
        var mail = "";
        var claims = auth.GetAuthenticationStateAsync().Result.User.Claims; 
        foreach(var claim in claims)
        {
            //navn
            //email
            if(claim.Type.Equals("name")) name = claim.Value;
            if(claim.Type.Equals("preferred_username")) mail = claim.Value;
        }

        Console.WriteLine(name);
        Console.WriteLine(mail);


        //Roboto@university.com
        //Lol@Blenis.dk

        mail = "Lol@Blenis.dk";
        
        var user = await Http.GetFromJsonAsync<UserDetailsDTO>($"https://localhost:7095/api/users/mail/{mail}");
        if(user == null)
        {
            
            RedirectUser();
        }
        requests = await Http.GetFromJsonAsync<CollaborationRequestDetailsDTO[]>($"https://localhost:7095/api/collaborationRequest/id/{user.Id}");
        Console.WriteLine("I am not null");



    } 

    private void SetBackgroundColor(CollaborationRequestDetailsDTO request) 
    {
        switch(request.Status) 
        {
            case CollaborationRequestStatus.ApprovedByStudent: 
                Background = "green";
                break;

            case CollaborationRequestStatus.Declined:
                Background = "red";
                break;

            case CollaborationRequestStatus.Waiting:
                Background = "yellow";
                break;

            case CollaborationRequestStatus.ApprovedBySupervisor:
                Background = "yellow";
                break;
        }
    }

    private async Task ApproveReqSTUD(CollaborationRequestDetailsDTO request)
    {
       var updated = new CollaborationRequestUpdateDTO {
            Id = request.Id,
            Status = CollaborationRequestStatus.ApprovedByStudent
        };

        await Http.PutAsJsonAsync<CollaborationRequestUpdateDTO>($"https://localhost:7095/api/collaborationRequest/{request.Id}", updated);

        await OnInitializedAsync();
       
    }

    private async Task ApproveReqSUP(CollaborationRequestDetailsDTO request)
    {        

        var updated = new CollaborationRequestUpdateDTO {
            Id = request.Id,
            Status = CollaborationRequestStatus.ApprovedBySupervisor
        };

        Console.WriteLine(updated.Id);

        await Http.PutAsJsonAsync($"https://localhost:7095/api/collaborationRequest/{request.Id}", updated);

        await OnInitializedAsync();
    
    }

    private async Task DeclineReq(CollaborationRequestDetailsDTO request) 
    {

        var updated = new CollaborationRequestUpdateDTO {
            Id = request.Id,
            Status = CollaborationRequestStatus.Declined
        };

        await Http.PutAsJsonAsync<CollaborationRequestUpdateDTO>($"https://localhost:7095/api/collaborationRequest/{request.Id}", updated);

        await OnInitializedAsync();

    }
  
    
    public void RedirectUser()
    {
        NavMan.NavigateTo($"https://localhost:7095/registerUser");
    }

}