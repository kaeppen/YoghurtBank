<!---Inspired by Rasmus LystrÃ¸m https://github.com/ondfisk/BDSA2021 -->
@page "/createrequest/{ideaid:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using YoghurtBank.Shared

@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider auth

@if (user == null)
{
    <p><em>You have to be registrated to get access to this site</em></p>
        <div class="card-body">
            <button type="button" class="btn btn-primary" onclick= "location.href ='https://localhost:7095/registerUser'">Go to registration</button> 
        </div>

}
else
{

<PageTitle>Create a request for collaboration</PageTitle>
<h1>Your collaboration journey starts with a simple application!</h1>
<p>You create new request by filling out the input form below</p>


<EditForm Model="@request">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if(!IsUnsolicited && loaded)
    {
        <div class="form-group">
        <label for="Request">You are now applying for the idea</label>
        <InputText id="Title" readonly="readonly" @bind-Value="idea.Title" class="form-control" />
        <label for="Request">Belonging to</label>
        <InputText id="Owner" readonly="readonly" @bind-Value="ideaOwner.UserName" class="form-control" />
        </div>
    }
    <div class="form-group">
        <label for="Application">Application</label>
        <InputTextArea id="Application" @bind-Value="request.Application" class="form-control" />
    </div>
    <!-- <div class="form-group">
        <label for="AmountOfCollaborators">Amount of collaborators</label>
        <InputNumber id="Description" @bind-Value="request.AmountOfCollaborators" class="form-control" />
    </div> EN CREATEDTO TAGER PT. IKKE ET AMOUNT OF COLLABS-->
    @if(IsUnsolicited && supervisors != null)
    {
        <p class="card-text">Available supervisors:</p>
               <ul class="list-group list-group-flush">
                   @foreach (var super in supervisors)
                   {
                       //function call with parameter courtesy of: https://github.com/dotnet/aspnetcore/issues/10138 
                       <li class="list-group-item"><button @onclick="@(() => PickSupervisor(super.Id))" class="btn btn-secondary">@super.UserName</button></li>
                   }
               </ul>
    } 
    else if(IsUnsolicited && (supervisors == null || supervisors.Count() == 0))
    {
        <h1>There are no supervisors to choose from</h1>
    }
    <div class="form-group">
        <br />
        <button type="submit" class="btn btn-success" @onclick="Create">Create</button>
        <button type="reset" class="btn btn-secondary">Reset</button>
    </div>
</EditForm>

}



@code {
    

    [Parameter]
    public int? ideaid {get; set;}
    private IdeaDetailsDTO? idea; 
    private UserDetailsDTO? user; 
    private CollaborationRequestCreateDTO request = new(); 
    private UserDetailsDTO[]? supervisors;
    private AuthenticationState? authState;
    private bool IsUnsolicited = false;
    private UserDetailsDTO? ideaOwner;  
    private bool loaded;

    protected override async Task OnInitializedAsync()
    {
        supervisors = await Http.GetFromJsonAsync<UserDetailsDTO[]>("https://localhost:7095/api/users");
        authState = await auth.GetAuthenticationStateAsync();
        var mail = authState.User.Claims.Where(c => c.Type.Equals("preferred_username")).Select(c => c.Value).FirstOrDefault();
        user = await Http.GetFromJsonAsync<UserDetailsDTO>($"https://localhost:7095/api/users/mail/{mail}");
        
        try 
        {
            idea = await Http.GetFromJsonAsync<IdeaDetailsDTO>($"https://localhost:7095/api/idea/{ideaid}");
            request.StudentId = user.Id;
            request.SupervisorId = idea.CreatorId;
            request.IdeaId = idea.Id;

            ideaOwner = await Http.GetFromJsonAsync<UserDetailsDTO>($"https://localhost:7095/api/users/id/{idea.CreatorId}");
            loaded = true; 
        } 
        catch(Exception e)
        {
            IsUnsolicited = true; 
            request.StudentId = user.Id;
            request.IdeaId = null;
        } 
    }
    
    //"bypassing" HandleValidSubmit
    private async Task Create()
    {
        var result = await Http.PostAsJsonAsync("https://localhost:7095/api/collaborationrequest", request);
    }

    private void PickSupervisor(int Id)
    {
        request.SupervisorId = Id;
    }
}